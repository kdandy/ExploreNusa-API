generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String
  latitude  Float
  longitude Float
  zoom      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cities    City[]
  islands   Island[]
  places    Place[]
  states    State[]

  @@map("countries")
}

model Island {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String
  latitude  Float
  longitude Float
  zoom      Float
  slug      String   @unique
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cities    City[]
  country   Country  @relation(fields: [countryId], references: [id])
  places    Place[]
  states    State[]

  @@map("islands")
}

model State {
  id        String   @id @default(cuid())
  countryId String
  name      String
  imageUrl  String
  latitude  Float
  longitude Float
  zoom      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  islandId  String?
  cities    City[]
  places    Place[]
  country   Country  @relation(fields: [countryId], references: [id])
  island    Island?  @relation(fields: [islandId], references: [id])

  @@map("states")
}

model City {
  id        String   @id @default(cuid())
  countryId String
  stateId   String
  name      String
  imageUrl  String
  latitude  Float
  longitude Float
  zoom      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  islandId  String?
  country   Country  @relation(fields: [countryId], references: [id])
  Island    Island?  @relation(fields: [islandId], references: [id])
  state     State    @relation(fields: [stateId], references: [id])
  places    Place[]

  @@map("cities")
}

model Category {
  id         String   @id @default(cuid())
  slug       String   @unique
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  isFeatured Boolean  @default(false)
  position   Int?
  places     Place[]  @relation("CategoryToPlace")

  @@map("categories")
}

model Place {
  id          String       @id @default(cuid())
  countryId   String
  stateId     String
  cityId      String
  title       String
  slug        String       @unique
  description String
  imageUrl    String
  latitude    Float
  longitude   Float
  zoom        Float
  address     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  islandId    String?
  isFeatured  Boolean      @default(false)
  position    Int?
  images      PlaceImage[]
  city        City         @relation(fields: [cityId], references: [id])
  country     Country      @relation(fields: [countryId], references: [id])
  island      Island?      @relation(fields: [islandId], references: [id])
  state       State        @relation(fields: [stateId], references: [id])
  savedPlace  SavedPlace[]
  categories  Category[]   @relation("CategoryToPlace")

  @@index([isFeatured, countryId, islandId, stateId, cityId])
  @@index([position])
  @@map("places")
}

model PlaceImage {
  id          String   @id @default(cuid())
  placeId     String
  url         String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  place       Place    @relation(fields: [placeId], references: [id])

  @@map("placeImages")
}

model User {
  id         String       @id @default(cuid())
  username   String       @unique
  email      String       @unique
  firstName  String
  lastName   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  password   Password?
  savedPlace SavedPlace[]

  @@map("users")
}

model Password {
  id        String   @id @default(cuid())
  hash      String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("passwords")
}

model SavedPlace {
  id        String   @id @default(cuid())
  placeId   String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  place     Place?   @relation(fields: [placeId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([placeId, userId])
  @@map("savedPlace")
}

model Category {
  id        String   @id
  name      String
  slug      String   @unique @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime
  Recipe    Recipe[]
}

model Ingredient {
  id             String           @id
  name           String
  slug           String           @unique @default("")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  IngredientItem IngredientItem[]
}

model IngredientItem {
  id           String     @id
  ingredientId String
  quantity     Float
  measurement  String
  sequence     Int        @default(0)
  Ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  Recipe       Recipe[]
}

model Password {
  id     String @id
  hash   String
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id             String           @id
  name           String
  description    String
  cookingTime    String?
  imageURL       String
  slug           String           @unique @db.VarChar(255)
  userId         String
  instructions   Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  SavedRecipe    SavedRecipe[]
  Category       Category[]
  IngredientItem IngredientItem[]
}

model SavedRecipe {
  id        String   @id
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          String        @id
  username    String        @unique
  fullname    String?
  email       String        @unique
  imageURL    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  description String?
  Password    Password?
  Recipe      Recipe[]
  SavedRecipe SavedRecipe[]
}
